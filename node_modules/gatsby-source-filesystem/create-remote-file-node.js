"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = require(`fs-extra`);
var got = require(`got`);
var crypto = require(`crypto`);
var path = require(`path`);

var _require = require(`./create-file-node`),
    createFileNode = _require.createFileNode;

var cacheId = function cacheId(url) {
  return `create-remote-file-node-${url}`;
};

module.exports = function (_ref) {
  var url = _ref.url,
      store = _ref.store,
      cache = _ref.cache,
      createNode = _ref.createNode;
  return new Promise(function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(resolve, reject) {
      var cachedHeaders, headers, response, digest, filename;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (url) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", resolve());

            case 2:
              fs.ensureDirSync(path.join(store.getState().program.directory, `.cache`, `gatsby-source-filesystem`));
              _context.next = 5;
              return cache.get(cacheId(url));

            case 5:
              cachedHeaders = _context.sent;
              headers = {};

              if (cachedHeaders && cachedHeaders.etag) {
                headers[`If-None-Match`] = cachedHeaders.etag;
              }
              response = void 0;
              _context.prev = 9;
              _context.next = 12;
              return got(url, { headers });

            case 12:
              response = _context.sent;
              _context.next = 18;
              break;

            case 15:
              _context.prev = 15;
              _context.t0 = _context["catch"](9);
              return _context.abrupt("return", reject(_context.t0));

            case 18:
              digest = crypto.createHash(`md5`).update(url).digest(`hex`);
              filename = path.join(store.getState().program.directory, `.cache`, `gatsby-source-filesystem`, digest + path.parse(url).ext);

              cache.set(cacheId(url), response.headers);
              if (response.statusCode === 200) {
                fs.writeFileSync(filename, response.body);
              }
              createFileNode(filename, {}, function (err, fileNode) {
                createNode(fileNode);
                resolve(fileNode);
              });

            case 23:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, undefined, [[9, 15]]);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }());
};