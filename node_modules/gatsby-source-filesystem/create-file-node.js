"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var slash = require(`slash`);
var path = require(`path`);
var md5File = require(`md5-file`);
var fs = require(`fs`);
var mime = require(`mime`);
var prettyBytes = require(`pretty-bytes`);

var createId = function createId(path) {
  var slashed = slash(path);
  return `${slashed} absPath of file`;
};

exports.createId = createId;

exports.createFileNode = function (pathToFile) {
  var pluginOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var cb = arguments[2];

  var slashed = slash(pathToFile);
  var slashedFile = (0, _extends3.default)({}, path.parse(slashed), {
    absolutePath: slashed
  });
  md5File(slashedFile.absolutePath, function (md5Err, contentDigest) {
    fs.stat(slashedFile.absolutePath, function (statErr, stats) {
      // Stringify date objects.
      var newFile = JSON.parse(JSON.stringify((0, _extends3.default)({
        // Don't actually make the File id the absolute path as otherwise
        // people will use the id for that and ids shouldn't be treated as
        // useful information.
        id: createId(pathToFile),
        children: [],
        parent: `___SOURCE___`,
        internal: {
          contentDigest: contentDigest,
          mediaType: mime.lookup(slashedFile.ext),
          type: `File`
        },
        sourceInstanceName: pluginOptions.name || `__PROGRAMATTIC__`,
        absolutePath: slashedFile.absolutePath,
        relativePath: slash(path.relative(pluginOptions.path || process.cwd(), slashedFile.absolutePath)),
        extension: slashedFile.ext.slice(1).toLowerCase(),
        size: stats.size,
        prettySize: prettyBytes(stats.size),
        modifiedTime: stats.mtime,
        accessTime: stats.atime,
        changeTime: stats.ctime,
        birthTime: stats.birthtime
      }, slashedFile, stats)));
      cb(null, newFile);
    });
  });
};